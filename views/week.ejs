<%- include("header.ejs", { active: 'week' }) %>

<% if (weatherData) { %>
<div class="main-container">
  <div class="weather-hero weather-<%= weatherData.weather[0].main.toLowerCase() %>">
    <div class="row">
      <div class="col-md-6">
        <h1 class="weather-city"><i class="fas fa-map-marker-alt me-2"></i><%= weatherData.name %>, <%= weatherData.sys.country %></h1>
        <div class="d-flex align-items-center mb-3">
          <img 
            src="https://openweathermap.org/img/wn/<%= weatherData.weather[0].icon %>@2x.png" 
            alt="<%= weatherData.weather[0].description %>" 
            class="weather-icon"
          >
          <div>
            <p class="weather-temp"><%= Math.round(weatherData.main.temp) %>°C</p>
            <p class="weather-description text-capitalize"><%= weatherData.weather[0].description %></p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="forecast-section">
    <h2 class="forecast-heading">7-Day Extended Forecast</h2>
    <div id="extended-forecast" class="forecast-container">
      <!-- Extended forecast will be loaded here -->
      <div class="text-center p-5">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-5">
    <div class="col-md-6">
      <div class="card mb-4">
        <div class="card-body">
          <h3 class="card-title mb-4">Temperature Trend</h3>
          <canvas id="tempChart" height="300"></canvas>
        </div>
      </div>
    </div>
    <div class="col-md-6">
      <div class="card mb-4">
        <div class="card-body">
          <h3 class="card-title mb-4">Precipitation Chance</h3>
          <canvas id="precipChart" height="300"></canvas>
        </div>
      </div>
    </div>
  </div>

  <div class="map-section">
    <h2 class="forecast-heading">Weather Map</h2>
    <div class="map-container">
      <div id="map"></div>
    </div>
    <div class="map-controls">
      <button class="map-control-btn active" data-layer="temp">Temperature</button>
      <button class="map-control-btn" data-layer="clouds">Clouds</button>
      <button class="map-control-btn" data-layer="precipitation">Precipitation</button>
      <button class="map-control-btn" data-layer="wind">Wind</button>
      <button class="map-control-btn" data-layer="pressure">Pressure</button>
    </div>
  </div>
</div>

<script>
  // Get weather data from EJS
  const weatherData = JSON.parse('<%- JSON.stringify(weatherData) %>');
  const API_KEY = '9fdf6e808cfe2098244e8ab9e85fda33';
  const lat = weatherData.coord.lat;
  const lon = weatherData.coord.lon;
  
  // Initialize map with a small delay to ensure container is ready
  setTimeout(() => {
    const map = L.map('map').setView([lat, lon], 8);
  
  // Add base map layer
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);
  
  // Add city marker
  L.marker([lat, lon])
    .addTo(map)
    .bindPopup(`<b>${weatherData.name}</b><br>Current: ${Math.round(weatherData.main.temp)}°C`)
    .openPopup();
  
  // Weather layers
  const layers = {
    temp: L.tileLayer(`https://tile.openweathermap.org/map/temp_new/{z}/{x}/{y}.png?appid=${API_KEY}`),
    clouds: L.tileLayer(`https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png?appid=${API_KEY}`),
    precipitation: L.tileLayer(`https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=${API_KEY}`),
    wind: L.tileLayer(`https://tile.openweathermap.org/map/wind_new/{z}/{x}/{y}.png?appid=${API_KEY}`),
    pressure: L.tileLayer(`https://tile.openweathermap.org/map/pressure_new/{z}/{x}/{y}.png?appid=${API_KEY}`)
  };
  
  // Add temperature layer by default
  layers.temp.addTo(map);
  
  // Handle layer button clicks
  document.querySelectorAll('.map-control-btn').forEach(button => {
    button.addEventListener('click', function() {
      // Remove active class from all buttons
      document.querySelectorAll('.map-control-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      
      // Add active class to clicked button
      this.classList.add('active');
      
      // Remove all layers
      Object.values(layers).forEach(layer => {
        map.removeLayer(layer);
      });
      
      // Add selected layer
      const layerName = this.getAttribute('data-layer');
      layers[layerName].addTo(map);
    });
  });
  
  // Fetch extended forecast data
  async function fetchExtendedForecast() {
    try {
      // Use our backend API endpoint for forecast data
      const response = await axios.get(`/api/onecall?lat=${lat}&lon=${lon}`);
      const forecastData = response.data;
      
      // Process daily forecast data
      const dailyData = forecastData.daily || [];
      const forecastContainer = document.getElementById('extended-forecast');
      forecastContainer.innerHTML = '';
      
      if (dailyData.length === 0) {
        forecastContainer.innerHTML = `
          <div class="alert alert-info w-100">
            <i class="fas fa-info-circle me-2"></i> No forecast data available.
          </div>
        `;
        return;
      }
      
      // Chart data arrays
      const days = [];
      const maxTemps = [];
      const minTemps = [];
      const precipProbs = [];
      
      // Create forecast cards for each day
      dailyData.slice(0, 7).forEach((day, index) => {
        const date = new Date(day.dt * 1000);
        const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
        const dayDate = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        
        // Add data for charts
        days.push(dayName);
        maxTemps.push(Math.round(day.temp.max));
        minTemps.push(Math.round(day.temp.min));
        precipProbs.push(Math.round(day.pop * 100)); // Probability of precipitation
        
        // Create forecast card
        const forecastCard = document.createElement('div');
        forecastCard.className = 'forecast-card';
        forecastCard.innerHTML = `
          <div class="forecast-day">${index === 0 ? 'Today' : dayName}</div>
          <div class="forecast-date">${dayDate}</div>
          <img src="https://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png" alt="${day.weather[0].description}" class="forecast-icon">
          <div class="forecast-temp">${Math.round(day.temp.max)}°C</div>
          <div class="forecast-temp-range">${Math.round(day.temp.min)}° - ${Math.round(day.temp.max)}°</div>
          <div class="forecast-description text-capitalize">${day.weather[0].description}</div>
          <div class="mt-2">
            <span class="badge bg-info"><i class="fas fa-tint me-1"></i>${Math.round(day.pop * 100)}%</span>
            <span class="badge bg-warning text-dark"><i class="fas fa-wind me-1"></i>${Math.round(day.wind_speed * 3.6)} km/h</span>
          </div>
        `;
        
        forecastContainer.appendChild(forecastCard);
      });
      
      // Create temperature chart
      const tempCtx = document.getElementById('tempChart').getContext('2d');
      new Chart(tempCtx, {
        type: 'line',
        data: {
          labels: days,
          datasets: [
            {
              label: 'Max Temperature (°C)',
              data: maxTemps,
              borderColor: '#ff6b6b',
              backgroundColor: 'rgba(255, 107, 107, 0.1)',
              borderWidth: 2,
              tension: 0.3,
              fill: true
            },
            {
              label: 'Min Temperature (°C)',
              data: minTemps,
              borderColor: '#4facfe',
              backgroundColor: 'rgba(79, 172, 254, 0.1)',
              borderWidth: 2,
              tension: 0.3,
              fill: true
            }
          ]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'top',
            },
            tooltip: {
              mode: 'index',
              intersect: false,
            }
          },
          scales: {
            y: {
              beginAtZero: false,
              grid: {
                color: 'rgba(0, 0, 0, 0.05)'
              }
            },
            x: {
              grid: {
                display: false
              }
            }
          }
        }
      });
      
      // Create precipitation chart
      const precipCtx = document.getElementById('precipChart').getContext('2d');
      new Chart(precipCtx, {
        type: 'bar',
        data: {
          labels: days,
          datasets: [
            {
              label: 'Precipitation Chance (%)',
              data: precipProbs,
              backgroundColor: 'rgba(79, 172, 254, 0.7)',
              borderColor: '#4facfe',
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'top',
            },
            tooltip: {
              mode: 'index',
              intersect: false,
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              max: 100,
              grid: {
                color: 'rgba(0, 0, 0, 0.05)'
              }
            },
            x: {
              grid: {
                display: false
              }
            }
          }
        }
      });
      
    } catch (error) {
      console.error('Error fetching extended forecast:', error);
      document.getElementById('extended-forecast').innerHTML = `
        <div class="alert alert-danger">
          Unable to load extended forecast data. Please try again later.
        </div>
      `;
      
      // Create empty charts to avoid errors
      const tempCtx = document.getElementById('tempChart').getContext('2d');
      new Chart(tempCtx, {
        type: 'line',
        data: { labels: [], datasets: [] },
        options: { responsive: true }
      });
      
      const precipCtx = document.getElementById('precipChart').getContext('2d');
      new Chart(precipCtx, {
        type: 'bar',
        data: { labels: [], datasets: [] },
        options: { responsive: true }
      });
    }
  }
  
  // Call the extended forecast function
  fetchExtendedForecast();
  }, 100);
</script>
<% } else { %>
<%- include("form.ejs", { weekPage: true }) %>
<% } %>

<%- include("footer.ejs") %>